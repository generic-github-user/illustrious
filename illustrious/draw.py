# AUTOGENERATED! DO NOT EDIT! File to edit: 00_draw.ipynb (unless otherwise specified).

__all__ = ['Coordinate', 'Object', 'Shape', 'Circle', 'Text', 'Diagram', 'Rectangle']

# Cell
from IPython.display import SVG, display
import svgwrite
import numpy as np

# Cell
class Coordinate:
    def __init__(self, xy=None, y=None):
        if xy is None:
            xy = [0, 0]
        if xy and y:
            self.pos = np.array([xy, y])
        elif isinstance(xy, (list, tuple)):
            self.pos = np.array(xy)
        else:
            self.pos = xy

# Cell
class Object:
    def __init__(self, *children, **kwargs):
#         if children is None
        self.children = children

# Cell
class Shape(Object):
    def __init__(self, *children):
        super().__init__(*children)

# Cell
class Circle(Shape):
    def __init__(self, *children):
        super().__init__(*children)

# Cell
class Text(Object):
    def __init__(self, text=None, position=None, fill='white', font_size=12, rotation=None, children=None):
        if children is None:
            children = []
        super().__init__(*children)
        self.text = text
        self.position = Coordinate(position)
        self.fill = fill
        if isinstance(font_size, (int,)):
            font_size = f'{font_size}px'
        self.font_size = font_size
        self.rotation = rotation

        self.drawer = 'text'
#     def alist(self, *args, **kwargs):
#         return Text(*args, children=[])
    def render(self, svg):
        return svg.text(self.text, insert=self.position.tuple(), fill=self.fill, font_size=self.font_size, rotate=self.rotation)
# Cell
class Rectangle(Shape):
    def __init__(self, *children, position=None, size=None, **kwargs):
        super().__init__(*children)
        self.position = Coordinate(position)
        self.size = size
        self.kwargs = kwargs
#         print(type(self.position.tuple()[0]), self.size, self.kwargs)
    def render(self, svg):
        return svg.rect(insert=self.position.tuple(), size=self.size, **self.kwargs)