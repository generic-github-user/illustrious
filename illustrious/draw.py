# AUTOGENERATED! DO NOT EDIT! File to edit: 00_draw.ipynb (unless otherwise specified).

__all__ = ['Coordinate', 'Object', 'Shape', 'Circle', 'Text', 'Diagram', 'Rectangle', 'Flowchart']

# Cell
from IPython.display import SVG, display
import svgwrite
import numpy as np

# Cell
class Coordinate:
    def __init__(self, xy=None, y=None):
        if xy is None:
            xy = [0, 0]
        if all(z is not None for z in [xy, y]):
            self.pos = np.array([xy, y])
        elif isinstance(xy, (list, tuple)):
            self.pos = np.array(xy)
        else:
            self.pos = xy
        self.x = self.pos[0]
        self.y = self.pos[1]
    def __add__(self, b):
        return Coordinate(self.pos + b.pos)
    def tuple(self):
        return tuple(map(int, self.pos))

# Cell
class Object:
    """
    A generic graphics object, which usually maps directly to an SVG element. Examples include shapes, text, lines, etc. These can also be nested, and certain relative properties (e.g., position) of child objects will inherit their base values from parent objects.
    """

    def __init__(self, *children, **kwargs):
        """
        Create a new Object instance.
        """

#         if children is None
        self.children = children
        for c in self.children:
            c.parent = self
#             c.position_absolute =

    def get_position(self):
        if hasattr(self, 'parent'):
            return self.position + self.parent.position
        else:
            return self.position

# Cell
class Shape(Object):
    def __init__(self, *children, **kwargs):
        """
        Create a new Shape object.
        """

        super().__init__(*children, **kwargs)

# Cell
class Circle(Shape):
    """
    A circle.
    """

    def __init__(self, *children):
        """
        Create a new Circle object.
        """

        super().__init__(*children)

# Cell
class Text(Object):
    """
    Some text.
    """

    def __init__(self, text=None, position=None, fill='black', font_size=12, rotation=None, children=None):
        """
        Create a new Text object.
        """

        if children is None:
            children = []
        super().__init__(*children)
        self.text = text
        if position is None:
            position = (20, 20)
        self.position = Coordinate(position)
        self.fill = fill
        if isinstance(font_size, (int,)):
            font_size = f'{font_size}px'
        self.font_size = font_size
        self.rotation = rotation

        self.drawer = 'text'
#     def alist(self, *args, **kwargs):
#         return Text(*args, children=[])
    def render(self, svg):
        return svg.text(self.text, insert=self.get_position().tuple(), fill=self.fill, font_size=self.font_size, rotate=self.rotation)

# Cell
class Diagram:
    """
    A diagram or illustration, which contains a set of objects to render and additional properties about the resulting image.
    """

    def __init__(self, *objects, path='./diagram1.svg', profile='full', background='white', dimensions=None):
        """
        Create a new Diagram object.
        """

        self.objects = []
        if dimensions is None:
            dimensions = (200, 200)
        self.dimensions = dimensions
        for obj in objects:
            if isinstance(obj, (list, tuple)):
                self.objects.extend(obj)
            elif isinstance(obj, Object):
                self.objects.append(obj)
            else:
                raise TypeError(f'All unnamed arguments passed to the Diagram initializer must be either Object (sub)class instances or lists/tuples of such instances; received object {obj} of type {type(obj).__name__}')
        if background is not None:
            if isinstance(background, str):
                self.objects.insert(0, Rectangle(fill=background, position=(0, 0), size=self.dimensions))
            elif isinstance(background, Object):
                self.objects.insert(0, background)
        self.path = path
        self.profile = profile
    def render(self):
        self.svg = svgwrite.Drawing(self.path, size=self.dimensions, profile=self.profile)
        for obj in self.objects:
            obj_render = obj.render(self.svg)
            if isinstance(obj_render, (list, tuple)):
                for subobj in obj_render:
                    self.svg.add(subobj)
#             elif isinstance(obj, Object):
            else:
                self.svg.add(obj_render)
        self.svg.save()
        return self
    def show(self):
        display(SVG(filename=self.path))
        return self

# Cell
class Rectangle(Shape):
    """
    A rectangle.
    """

    def __init__(self, *children, position=None, size=None, **kwargs):
        """
        Create a new Rectangle object.
        """

        super().__init__(*children)
        if position is None:
            position = (20, 20)
        self.position = Coordinate(position)
        if size is None:
            size = (40, 10)
        self.size = size
        self.kwargs = kwargs
#         print(type(self.position.tuple()[0]), self.size, self.kwargs)
    def render(self, svg):
        result = [svg.rect(insert=self.position.tuple(), size=self.size, **self.kwargs)]
        result.extend([c.render(svg) for c in self.children])
        return result

# Cell

class Flowchart(Diagram):
    """
    A generic flowchart, typically used to present some process or system that carries out an operation over time. The general form is a directed graph with nodes connected by arrows/edges; this class makes it easier to create flowchart-style diagrams from primitives, for example a list of strings or images. This cuts down on the boilerplate needed to build common types of diagrams.
    """
